#!/usr/bin/python
# --coding:UTF8

import  os
from time import time
import json

bdsolverpath = "./bdsolver -tpsolver cplex"
makerandompath = "./makerandommarkov"
saveto = "files"


def runone(nlabels, nstates, bf):
    filename = "{}/{}labels_{}states_{}bf".format(saveto, nlabels, nstates, bf)
    os.system("{} {} {} {} {} >> /dev/null".format(makerandompath, nlabels, nstates, bf, filename))

    t = time()
    os.system("{} {}".format(bdsolverpath, filename))
    t = time() -t


    result = {
        "nlabels": nlabels,
        "nstates": nstates,
        "bf": bf,
        "time": t}
    return result


def writeresult():
    global results
    with open("{}/results.json".format(saveto), "w") as f:
        f.write(json.dumps(results, indent=4))

    with open("{}/results.text".format(saveto), "w") as f:
        for result in results:
            f.write("{}\t{}\n".format(result['nstates'], result['time']))

results = []

def makeresults(gen):
    global results
    while True:
        try:
            nlabels, nstates, bf  = gen.next()
        except StopIteration:
            return results

        result = runone(nlabels, nstates, bf)

        results.append(result)
        writeresult()
        print(result)


def generator_state(nstatefrom, nstateto, nlabels, bf):
    for i in range(nstatefrom, nstateto, 30):
        yield (nlabels, i, bf)


x = generator_state(100, 400, 3, 2)
makeresults(x)
